// const { getDefaultConfig } = require('expo/metro-config');
// const path = require('path');
//
// // Find the project and workspace directories
// const projectRoot = __dirname;
// // This can be replaced with `find-yarn-workspace-root`
// // const workspaceRoot = path.resolve(projectRoot, '../..');
// const commonRoot = path.resolve(projectRoot, '../common');
// console.log('#######################', {commonRoot, __dirname}) // eslint-disable-line no-console
//
// const config = getDefaultConfig(projectRoot);
//
// // 1. Watch all files within the monorepo
// // config.watchFolders = [workspaceRoot];
// config.watchFolders = [commonRoot, projectRoot];
// // 2. Let Metro know where to resolve packages and in what order
// config.resolver.nodeModulesPaths = [
//     path.resolve(projectRoot, 'node_modules'),
//     // path.resolve(workspaceRoot, 'node_modules'),
//     path.resolve(commonRoot, 'node_modules'),
// ];
// // 3. Force Metro to resolve (sub)dependencies only from the `nodeModulesPaths`
// config.resolver.disableHierarchicalLookup = true;
//
// module.exports = config;


//////////////////////////////

const path = require('path');
const exclusionList = require('metro-config/src/defaults/exclusionList');

// const moduleRoot = path.resolve(__dirname, '../..');

const projectRoot = __dirname;
const commonRoot = path.resolve(projectRoot, '../common');
console.log('#######################', {commonRoot, __dirname, '#common': path.resolve(commonRoot, 'src')}) // eslint-disable-line no-console

module.exports = {
  watchFolders: [projectRoot, commonRoot],
  // watchFolders: [moduleRoot],
  resolver: {
    extraNodeModules: {
      '@test/common': commonRoot,
    //   // react: path.resolve(__dirname, 'node_modules/react'),
    //   // 'react-native': path.resolve(__dirname, 'node_modules/react-native'),
    },
    // sourceExts: [
    //   path.resolve(commonRoot, 'src'),
    // ],

    // blockList: exclusionList([
    //   new RegExp(`${moduleRoot}/node_modules/react/.*`),
    //   new RegExp(`${moduleRoot}/node_modules/react-native/.*`),
    // ]),
  },
  // transformer: {
  //   getTransformOptions: async () => ({
  //     transform: {
  //       experimentalImportSupport: false,
  //       inlineRequires: true,
  //     },
  //   }),
  // },
};
